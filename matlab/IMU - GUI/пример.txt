classdef MyGyroGui < matlab.apps.AppBase

    % Properties that correspond to app components
    properties (Access = public)
        UIFigure               matlab.ui.Figure
        UIAxes                 matlab.ui.control.UIAxes
        Panel                  matlab.ui.container.Panel
        COMsDropDownLabel      matlab.ui.control.Label
        COMsDropDown           matlab.ui.control.DropDown
        StartButton            matlab.ui.control.Button
        ResetpositionButton    matlab.ui.control.Button
        ConnectButton          matlab.ui.control.Button
        LOGPanel               matlab.ui.container.Panel
        GyrooverloadLampLabel  matlab.ui.control.Label
        GyrooverloadLamp       matlab.ui.control.Lamp
        AccoverloadLampLabel   matlab.ui.control.Label
        AccoverloadLamp        matlab.ui.control.Lamp
        LogTextArea            matlab.ui.control.TextArea
    end

   
    properties (Access = private)
        %timers
        generic_upd_tmr = timer;
        %data
        port_list;
        connection_log = {'Connected'};
        sent_log;
        rsvd_log;
        %vars
        current_port = ' ';
        %sem
        port_fxn_pass = false;
        con_in_process = false;
        
        IMU
        PCazimuth=15;
        north=[1; 0; 0];        
        acc=[0 0 0];
        gyro=[0 0 0];
        period=0;
        mag=[0 0 0];
        magInit=[0 0 0];
        magOrig=[0 0 0];
        gravity=[0 0 0];    
    end
    
    methods (Access = private)
        
        function form_upd(app)
            switch app.con_state("left", false)
                case 'Connected'
                    if(app.current_port.BytesAvailable)
                        app.rsvd_log{end+1} = fscanf(app.current_port);
                        app.rsvd_log{end} = app.rsvd_log{end}(1:end-1);
                    end
                case 'Disconnected'
                    %portlist
%                     s_info = instrhwinfo("INTERFACE", 'serial');
%                     app.port_list = s_info.AvailableSerialPorts;
                    %gui
%                     app.COMsDropDown.Items = app.port_list;
%                     app.COMsDropDown.ItemsData = app.portList;
            end
        end
        
        function connect_fxn(app)
            %% port connection module
            try
                app.con_in_process = true;
                app.current_port = "COM10";
                fopen(app.current_port);
                app.port_fxn_pass = true;
            catch ME
                if (ME.identifier == "MATLAB:serial:fopen:opfailed")
                    warning('MATLAB_serial_fopen_opfailed');
                else
                    warning('Connection_failed_unknown_reason');
                end
                app.port_fxn_pass = false;
                app.connection_log{end+1} = [app.COMsDropDown.Value, ' connect failed'];
            end
                app.con_in_process = false;
                
            %% end of port connection module
            
            if (app.con_state("left", false) == "Connected")
%                 set("COM10", 'BaudRate', 115200);
                app.ConnectButton.Text = "Disconnect";
                app.COMsDropDown.Enable = 'off';
                app.connection_log{end+1} = [app.COMsDropDown.Value, ' ',...
                    num2str(115200),...
                    ' Started'];
            end
            app.LogTextArea.Value = app.connection_log;
        end

        function disconnect_fxn(app)
            if (app.con_state("left", false) == "Connected")
                app.ConnectButton.Text = 'Connect';
                app.con_state("set", false);
                try
                    fclose(app.current_port);
                    app.connection_log{end+1} = [app.COMsDropDown.Value, ' ', 'disconnected'];
                catch
                    warning('Disconnect_failed');
                    app.connection_log{end+1} = [app.COMsDropDown.Value, ' ', 'Disconnect failed'];
                end
                app.current_port = '';
                app.COMsDropDown.Enable = 'on';
                app.LogTextArea.Value = app.connection_log;
            end
        end
        
        function state = con_state(app, set, val)
            state = "Disconnected";
            if (app.port_fxn_pass && ~app.con_in_process)
                state = "Connected";
            end
            if (app.port_fxn_pass && app.con_in_process)
                state = "Connecting";
            end
            if (set == "set")
                app.port_fxn_pass = val;
                app.con_in_process = val;
            end
            
        end
        
        %% IMU functions        
        function f = RotZ(app, a)
            a = deg2rad(a);
            f=[cos(a) -sin(a) 0; sin(a) cos(a) 0; 0 0 1];            
        end
       
        function [ACx, ACy, ACz, GYx, GYy, GYz, interval, MAx, MAy, MAz]=getIMUdata(app, port)
            ACx=0; ACy=0; ACz=0; GYx=0; GYy=0; GYz=0; interval=0; MAx=0; MAy=0; MAz=0;
            accOffs=[(-10 +10)/2, (-9.8 +10.25)/2, (-9.28 +10.88)/2];
            accMult=[20/(10+10), 20/(9.8+10.25), 20/(9.28+10.88)];
            gyroOffs=[1.5807 1.6857 0.3176];
            gyroMult=[1 1 1];
            magOffs=[(-360+212)/2,(-280+285)/2, (-170+397)/2];
            magMult=[500/(212+360), 500/(280+285), 500/(170+397)];            
            s=read(port,11,'int16');
            if(s(8) == 23157)
                ACx=s(1)/1638.4;
                ACy=s(2)/1638.4;
                ACz=s(3)/1638.4;
                GYx=s(4)/32.8;
                GYy=s(5)/32.8;
                GYz=s(6)/32.8;
                interval=s(7)/1000000;
        %         s(8);
                MAx=s(10);
                MAy=s(9);
                MAz=-s(11);   
                
        %        writematrix([ACx, ACy, ACz, GYx, GYy, GYz, interval, MAx, MAy, MAz], 'IMU_DATA.txt', 'WriteMode', 'append');
                
                ACx=(ACx-corrects(1,1))*corrects(1,4);
                ACy=(ACy-corrects(1,2))*corrects(1,5);
                ACz=(ACz-corrects(1,3))*corrects(1,6);
                GYx=(GYx-corrects(2,1))*corrects(2,4);
                GYy=(GYy-corrects(2,2))*corrects(2,5);
                GYz=(GYz-corrects(2,3))*corrects(2,6);
                if (norm([MAx, MAy, MAz]) ~=0)
                    MAx=(MAx-corrects(3,1))*corrects(3,4);
                    MAy=(MAy-corrects(3,2))*corrects(3,5);
                    MAz=(MAz-corrects(3,3))*corrects(3,6);
                end
            else
                flush(port)            

            end
        end
        %% end IMU functions         
    end
 
        
    

    % Callbacks that handle component events
    methods (Access = private)

        % Code that executes after component creation
        function startupFcn(app)
            %create gui upd timer
            app.generic_upd_tmr.period = 0.01;
            app.generic_upd_tmr.ExecutionMode = 'fixedRate';
            app.generic_upd_tmr.timerFcn = @(~, ~)app.form_upd;
            
            %update form
            app.form_upd();
            
            start(app.generic_upd_tmr);
        end

        % Button pushed function: StartButton
        function StartButtonPushed(app, event)
            app.IMU = serialport("COM10",115200,"Timeout",150);
            app.north=app.RotZ(app.PCazimuth)*app.north;
            quiver(app.UIAxes,0,0, app.north(1), app.north(2), 0.1, 'r--');
                       
            magCnt=0;
            
            app.gravity=[0 0 0];
                        
            for i=1:100
               [app.acc(1),app.acc(2),app.acc(3), app.gyro(1), app.gyro(2), app.gyro(3), app.period, app.mag(1), app.mag(2), app.mag(3)]=getIMUdata(app.IMU,app.sensorCorrectionMatrix);
               app.gravity=app.gravity+app.acc;
               if(norm(app.mag)~=0)
                app.magInit=app.magInit+app.mag;
                magCnt = magCnt+1;
               end
            end
            app.gravity = -app.gravity./100;
            app.gravity = app.gravity';
            GRAVITY = [0; 0; -norm(app.gravity)];
            l=cross(app.gravity, GRAVITY);
            l=l/norm(l);
            c=dot(app.gravity, GRAVITY)/(norm(app.gravity)*norm(app.gravity));
            s=sqrt(1-c^2);
            lx=l(1); ly=l(2); lz=l(3);
            Rinit=[ c+(1-c)*lx^2 (1-c)*lx*ly-s*lz (1-c)*lz*lx+s*ly; (1-c)*lx*ly+s*lz c+(1-c)*ly^2 (1-c)*lz*ly-s*lx; (1-c)*lx*lz-s*ly (1-c)*ly*lz+s*lx c+(1-c)*lz^2];
            app.basis=Rinit*app.basis;
            app.gravity=app.basis*app.gravity;
            norm(app.gravity)
            
            app.magInit=app.magInit/magCnt;
            app.magInit=app.basis*app.magInit';
            app.magInit(3) = 0;
            app.magInit=app.magInit/(norm(app.magInit));
            theta = -angle(app.north, app.magInit);
            rad2deg(theta)
            Rmag=[cos(theta) -sin(theta) 0; sin(theta) cos(theta) 0; 0 0 1];
            app.basis=Rmag*app.basis;
            
        end

        % Close request function: UIFigure
        function UIFigureCloseRequest(app, event)
            app.disconnect_fxn();
            delete(app)            
        end

        % Button pushed function: ConnectButton
        function ConnectButtonPushed(app, event)
            if(~isempty(app.COMsDropDown.Value))
                switch app.con_state("left", false);
                    case "Connected"
                        app.disconnect_fxn();
                    case "Disconnected"
                        app.connect_fxn();
                end
            end            
        end
    end

    % Component initialization
    methods (Access = private)

        % Create UIFigure and components
        function createComponents(app)

            % Create UIFigure and hide until all components are created
            app.UIFigure = uifigure('Visible', 'off');
            app.UIFigure.Position = [100 100 713 506];
            app.UIFigure.Name = 'MATLAB App';
            app.UIFigure.CloseRequestFcn = createCallbackFcn(app, @UIFigureCloseRequest, true);

            % Create UIAxes
            app.UIAxes = uiaxes(app.UIFigure);
            title(app.UIAxes, '')
            xlabel(app.UIAxes, 'X')
            ylabel(app.UIAxes, 'Y')
            app.UIAxes.XLim = [-0.125 0.125];
            app.UIAxes.YLim = [-0.125 0.125];
            app.UIAxes.ZLim = [-0.125 0.125];
            app.UIAxes.XGrid = 'on';
            app.UIAxes.YGrid = 'on';
            app.UIAxes.ZGrid = 'on';
            app.UIAxes.Position = [196 2 518 505];

            % Create Panel
            app.Panel = uipanel(app.UIFigure);
            app.Panel.Position = [1 317 196 190];

            % Create COMsDropDownLabel
            app.COMsDropDownLabel = uilabel(app.Panel);
            app.COMsDropDownLabel.HorizontalAlignment = 'right';
            app.COMsDropDownLabel.Position = [15 150 39 22];
            app.COMsDropDownLabel.Text = 'COMs';

            % Create COMsDropDown
            app.COMsDropDown = uidropdown(app.Panel);
            app.COMsDropDown.Position = [62 150 114 22];

            % Create StartButton
            app.StartButton = uibutton(app.Panel, 'push');
            app.StartButton.ButtonPushedFcn = createCallbackFcn(app, @StartButtonPushed, true);
            app.StartButton.Position = [15 45 161 22];
            app.StartButton.Text = 'Start';

            % Create ResetpositionButton
            app.ResetpositionButton = uibutton(app.Panel, 'push');
            app.ResetpositionButton.Position = [15 12 161 22];
            app.ResetpositionButton.Text = 'Reset position';

            % Create ConnectButton
            app.ConnectButton = uibutton(app.Panel, 'push');
            app.ConnectButton.ButtonPushedFcn = createCallbackFcn(app, @ConnectButtonPushed, true);
            app.ConnectButton.Position = [15 105 161 22];
            app.ConnectButton.Text = 'Connect';

            % Create LOGPanel
            app.LOGPanel = uipanel(app.UIFigure);
            app.LOGPanel.Title = 'LOG';
            app.LOGPanel.Position = [1 1 196 317];

            % Create GyrooverloadLampLabel
            app.GyrooverloadLampLabel = uilabel(app.LOGPanel);
            app.GyrooverloadLampLabel.HorizontalAlignment = 'right';
            app.GyrooverloadLampLabel.Position = [12 267 81 22];
            app.GyrooverloadLampLabel.Text = 'Gyro overload';

            % Create GyrooverloadLamp
            app.GyrooverloadLamp = uilamp(app.LOGPanel);
            app.GyrooverloadLamp.Position = [108 267 20 20];
            app.GyrooverloadLamp.Color = [1 1 1];

            % Create AccoverloadLampLabel
            app.AccoverloadLampLabel = uilabel(app.LOGPanel);
            app.AccoverloadLampLabel.HorizontalAlignment = 'right';
            app.AccoverloadLampLabel.Position = [18 230 75 22];
            app.AccoverloadLampLabel.Text = 'Acc overload';

            % Create AccoverloadLamp
            app.AccoverloadLamp = uilamp(app.LOGPanel);
            app.AccoverloadLamp.Position = [108 230 20 20];
            app.AccoverloadLamp.Color = [1 1 1];

            % Create LogTextArea
            app.LogTextArea = uitextarea(app.LOGPanel);
            app.LogTextArea.Position = [1 1 195 220];

            % Show the figure after all components are created
            app.UIFigure.Visible = 'on';
        end
    end

    % App creation and deletion
    methods (Access = public)

        % Construct app
        function app = MyGyroGui

            % Create UIFigure and components
            createComponents(app)

            % Register the app with App Designer
            registerApp(app, app.UIFigure)

            % Execute the startup function
            runStartupFcn(app, @startupFcn)

            if nargout == 0
                clear app
            end
        end

        % Code that executes before app deletion
        function delete(app)

            % Delete UIFigure when app is deleted
            delete(app.UIFigure)
        end
    end
end